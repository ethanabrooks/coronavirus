{"version":3,"sources":["App.tsx","serviceWorker.js","index.js"],"names":["colors","App","React","useState","type","state","setState","useEffect","fetch","then","res","json","data","error","message","dtf","Intl","DateTimeFormat","year","month","day","nested_data","List","groupBy","e","dateChecked","map","entries","first","positive","most_recent_data","maxBy","_","k","states","sortBy","v","keySeq","toArray","console","log","entrySeq","date","cases","Map","set","Date","valueOf","toList","m","get","width","height","toJS","margin","top","right","bottom","left","s","i","dataKey","stroke","formatToParts","mo","value","da","ye","strokeDasharray","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","registration","unregister","catch"],"mappings":"2RAwBMA,EAAS,CACb,UACA,UACA,UACA,UACA,UACA,UACA,UACA,UACA,UACA,UACA,UACA,UACA,UACA,UACA,UACA,UACA,UACA,UACA,UACA,UACA,UACA,UACA,UACA,UACA,UACA,UACA,UACA,UACA,UACA,UACA,UACA,UACA,UACA,UACA,UACA,UACA,UACA,UACA,UACA,UACA,UACA,UACA,UACA,UACA,UACA,UACA,UACA,UACA,UACA,UACA,UACA,UACA,WAyFaC,EAtFW,WAAO,IAAD,EACJC,IAAMC,SAAgB,CAAEC,KAAM,YAD1B,mBACvBC,EADuB,KAChBC,EADgB,KAc9B,OATAJ,IAAMK,WAAU,WACdC,MAAM,8CACHC,MAAK,SAAAC,GAAG,OAAIA,EAAIC,UAChBF,MACC,SAAAG,GAAI,OAAIN,EAAS,CAAEF,KAAM,SAAUQ,YACnC,SAAAC,GAAK,OAAIP,EAAS,CAAEF,KAAM,QAASS,eAEtC,IAEKR,EAAMD,MACZ,IAAK,UACH,OAAO,2CACT,IAAK,QACH,OAAO,uCAAaC,EAAMQ,MAAMC,SAClC,IAAK,SACH,IAAMC,EAAM,IAAIC,KAAKC,eAAe,KAAM,CACxCC,KAAM,UACNC,MAAO,QACPC,IAAK,YAEDC,EAGFC,YAAKjB,EAAMO,MACZW,SAAQ,SAACC,GAAD,OAAoBA,EAAEC,eAC9BC,KAAI,SAACC,GAAD,OACHA,EACGJ,SAAQ,SAACC,GAAD,OAAsBA,EAAEnB,SAChCqB,KAAI,SAACC,GAAD,OAA+CA,EAAQC,WAC3DF,KAAI,SAACF,GAAD,OAAcA,EAAEK,eAErBC,EAAmBT,EAAYU,OAAM,SAACC,EAAGC,GAAJ,OAAUA,KACrD,GAAgC,qBAArBH,EACT,OAAO,oDAET,IAAMI,EAAmBJ,EACtBK,QAAO,SAACC,EAAGH,GAAJ,OAAWG,KAClBC,SACAC,UACHC,QAAQC,IAAIN,GAEZ,IAAMtB,EAAOS,EACVoB,WACAf,KAAI,mCAAEgB,EAAF,KAAQC,EAAR,YACHC,YAAID,GAAOE,IAAI,OAAQ,IAAIC,KAAKJ,GAAMK,cAEvCC,SAEAb,QAAO,SAACc,GAAD,OAA4BA,EAAEC,IAAI,WAE5C,OACE,6BACE,kBAAC,IAAD,CACEC,MAAO,IACPC,OAAQ,IACRxC,KAAMA,EAAKyC,OACXC,OAAQ,CAAEC,IAAK,GAAIC,MAAO,GAAIC,OAAQ,GAAIC,KAAM,KAE/CxB,EAAOR,KAAI,SAACiC,EAAWC,GACtB,OAAO,kBAAC,IAAD,CAAMxD,KAAK,WAAWyD,QAASF,EAAGG,OAAQ9D,EAAO4D,QAE1D,kBAAC,IAAD,CACEC,QAAS,SAAArC,GAAM,IAAD,EAKRT,EAAIgD,cAAc,IAAIjB,KAAKtB,EAAEkB,OALrB,mBAEDsB,EAFC,KAERC,MACOC,EAHC,KAGRD,MACOE,EAJC,KAIRF,MAEJ,MAAM,GAAN,OAAUD,EAAV,YAAgBE,EAAhB,YAAsBC,MAG1B,kBAAC,IAAD,CAAeL,OAAO,OAAOM,gBAAgB,QAC7C,kBAAC,IAAD,CAAOP,QAAQ,SACf,kBAAC,IAAD,MACA,kBAAC,IAAD,UCnJQQ,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCZNC,IAASC,OACP,kBAAC,IAAMC,WAAP,KACE,kBAAC,EAAD,OAEFC,SAASC,eAAe,SDyHpB,kBAAmBC,WACrBA,UAAUC,cAAcC,MACrBxE,MAAK,SAAAyE,GACJA,EAAaC,gBAEdC,OAAM,SAAAvE,GACL0B,QAAQ1B,MAAMA,EAAMC,c","file":"static/js/main.32a0616d.chunk.js","sourcesContent":["import React from \"react\";\nimport \"./App.css\";\nimport \"../node_modules/react-vis/dist/style.css\";\nimport {\n  XAxis,\n  LineChart,\n  Line,\n  CartesianGrid,\n  YAxis,\n  Tooltip\n} from \"recharts\";\nimport { Map, List, Collection } from \"immutable\";\n\ntype Entry = {\n  state: string;\n  positive: number;\n  dateChecked: Date;\n};\n\ntype State =\n  | { type: \"loading\" }\n  | { type: \"error\"; error: any }\n  | { type: \"loaded\"; data: Entry[] };\n\nconst colors = [\n  \"#ff0079\",\n  \"#fd1c7d\",\n  \"#fb2b80\",\n  \"#fa3584\",\n  \"#f83e88\",\n  \"#f6468b\",\n  \"#f44d8f\",\n  \"#f25393\",\n  \"#ef5996\",\n  \"#ed5f9a\",\n  \"#eb649e\",\n  \"#e969a1\",\n  \"#e66ea5\",\n  \"#e472a8\",\n  \"#e177ac\",\n  \"#df7baf\",\n  \"#dc7fb2\",\n  \"#da83b6\",\n  \"#d787b9\",\n  \"#d48bbc\",\n  \"#d18fc0\",\n  \"#ce92c3\",\n  \"#cb96c6\",\n  \"#c89ac9\",\n  \"#c59dcc\",\n  \"#c2a1cf\",\n  \"#bea4d2\",\n  \"#bba7d5\",\n  \"#b7abd8\",\n  \"#b4aeda\",\n  \"#b0b1dd\",\n  \"#adb4e0\",\n  \"#a9b7e2\",\n  \"#a5bae5\",\n  \"#a1bde7\",\n  \"#9dc0e9\",\n  \"#99c3ec\",\n  \"#95c6ee\",\n  \"#90c9f0\",\n  \"#8cccf2\",\n  \"#88cff3\",\n  \"#83d2f5\",\n  \"#7fd4f7\",\n  \"#7ad7f8\",\n  \"#76dafa\",\n  \"#71ddfb\",\n  \"#6cdffc\",\n  \"#68e2fd\",\n  \"#63e4fe\",\n  \"#5fe7fe\",\n  \"#5beaff\",\n  \"#57ecff\",\n  \"#53efff\"\n];\n\nconst App: React.FC<{}> = () => {\n  const [state, setState] = React.useState<State>({ type: \"loading\" });\n  //rest of code will be performing for iOS on background too\n  //\n\n  React.useEffect(() => {\n    fetch(\"https://covidtracking.com/api/states/daily\")\n      .then(res => res.json())\n      .then(\n        data => setState({ type: \"loaded\", data }),\n        error => setState({ type: \"error\", error })\n      );\n  }, []);\n\n  switch (state.type) {\n    case \"loading\":\n      return <div>Loading...</div>;\n    case \"error\":\n      return <div>Error: {state.error.message}</div>;\n    case \"loaded\":\n      const dtf = new Intl.DateTimeFormat(\"en\", {\n        year: \"numeric\",\n        month: \"short\",\n        day: \"2-digit\"\n      });\n      const nested_data: Collection.Keyed<\n        Date,\n        Collection.Keyed<string, number>\n      > = List(state.data)\n        .groupBy((e: Entry): Date => e.dateChecked)\n        .map((entries: Collection<number, Entry>) =>\n          entries\n            .groupBy((e: Entry): string => e.state)\n            .map((entries: Collection<number, Entry>): Entry => entries.first())\n            .map((e: Entry) => e.positive)\n        );\n      const most_recent_data = nested_data.maxBy((_, k) => k);\n      if (typeof most_recent_data === \"undefined\") {\n        return <div>Error: \"Empty data\"</div>;\n      }\n      const states: string[] = most_recent_data\n        .sortBy((v, k) => -v)\n        .keySeq()\n        .toArray();\n      console.log(states);\n\n      const data = nested_data\n        .entrySeq()\n        .map(([date, cases]) =>\n          Map(cases).set(\"date\", new Date(date).valueOf())\n        )\n        .toList()\n\n        .sortBy((m: Map<string, number>) => m.get(\"date\"));\n\n      return (\n        <div>\n          <LineChart\n            width={1000}\n            height={600}\n            data={data.toJS()}\n            margin={{ top: 10, right: 10, bottom: 10, left: 10 }}\n          >\n            {states.map((s: string, i: number) => {\n              return <Line type=\"monotone\" dataKey={s} stroke={colors[i]} />;\n            })}\n            <XAxis\n              dataKey={e => {\n                const [\n                  { value: mo },\n                  { value: da },\n                  { value: ye }\n                ] = dtf.formatToParts(new Date(e.date));\n                return `${mo} ${da} ${ye}`;\n              }}\n            />\n            <CartesianGrid stroke=\"#ccc\" strokeDasharray=\"5 5\" />\n            <XAxis dataKey=\"name\" />\n            <YAxis />\n            <Tooltip />\n          </LineChart>\n        </div>\n      );\n  }\n};\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from \"react\";\nimport ReactDOM from \"react-dom\";\nimport \"./index.css\";\nimport App from \"./App\";\nimport * as serviceWorker from \"./serviceWorker\";\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById(\"root\")\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}