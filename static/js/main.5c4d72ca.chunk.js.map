{"version":3,"sources":["App.tsx","serviceWorker.js","index.js"],"names":["App","React","useState","type","state","setState","useEffect","fetch","then","res","json","data","excluded","Set","highlighted","error","message","dtf","Intl","DateTimeFormat","year","month","day","nested_data","List","groupBy","e","dateChecked","map","entries","first","positive","most_recent_data","maxBy","_","k","entrySeq","date","cases","Map","set","Date","valueOf","toList","sortBy","m","get","states","v","keySeq","filterNot","s","includes","toArray","getStroke","getOpacity","className","width","height","toJS","margin","top","right","bottom","left","i","dataKey","stroke","opacity","isAnimationActive","onMouseOver","d","onClick","add","formatToParts","mo","value","da","ye","strokeDasharray","offset","remove","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","registration","unregister","catch","console"],"mappings":"2RAwLeA,EAzJW,WAAO,IAAD,EACJC,IAAMC,SAAgB,CAAEC,KAAM,YAD1B,mBACvBC,EADuB,KAChBC,EADgB,KAoB9B,OAfAJ,IAAMK,WAAU,WACdC,MAAM,8CACHC,MAAK,SAAAC,GAAG,OAAIA,EAAIC,UAChBF,MACC,SAAAG,GAAI,OACFN,EAAS,CACPF,KAAM,SACNQ,OACAC,SAAUC,cACVC,YAAa,UAEjB,SAAAC,GAAK,OAAIV,EAAS,CAAEF,KAAM,QAASY,eAEtC,IAEKX,EAAMD,MACZ,IAAK,UACH,OAAO,2CACT,IAAK,QACH,OAAO,uCAAaC,EAAMW,MAAMC,SAClC,IAAK,SACH,IAAMC,EAAM,IAAIC,KAAKC,eAAe,KAAM,CACxCC,KAAM,UACNC,MAAO,QACPC,IAAK,YAEDC,EAGFC,YAAKpB,EAAMO,MACZc,SAAQ,SAACC,GAAD,OAAoBA,EAAEC,eAC9BC,KAAI,SAACC,GAAD,OACHA,EACGJ,SAAQ,SAACC,GAAD,OAAsBA,EAAEtB,SAChCwB,KAAI,SAACC,GAAD,OAA+CA,EAAQC,WAC3DF,KAAI,SAACF,GAAD,OAAcA,EAAEK,eAErBC,EAAmBT,EAAYU,OAAM,SAACC,EAAGC,GAAJ,OAAUA,KACrD,GAAgC,qBAArBH,EACT,OAAO,oDAET,IAAMrB,EAAOY,EACVa,WACAR,KAAI,mCAAES,EAAF,KAAQC,EAAR,YACHC,YAAID,GAAOE,IAAI,OAAQ,IAAIC,KAAKJ,GAAMK,cAEvCC,SAEAC,QAAO,SAACC,GAAD,OAA4BA,EAAEC,IAAI,WAEtCC,EAASf,EACZY,QAAO,SAACI,EAAGb,GAAJ,OAAWa,KAClBC,SACAC,WAAU,SAAAC,GAAC,OAAI/C,EAAMQ,SAASwC,SAASD,MACvCE,UAEGC,EAAY,SAACH,GACjB,OAAI/C,EAAMU,cAAgBqC,EACjB,UAEA,WAILI,EAAa,SAACJ,GAClB,OAAQ/C,EAAMU,aACZ,KAAKqC,EAEL,KAAK,KACH,OAAO,EACT,QACE,MAAO,KAIb,OACE,6BACE,yBAAKK,UAAU,SACb,kBAAC,IAAD,CACEC,MAAO,IACPC,OAAQ,IACR/C,KAAMA,EAAKgD,OACXC,OAAQ,CAAEC,IAAK,GAAIC,MAAO,GAAIC,OAAQ,GAAIC,KAAM,KAE/CjB,EAAOnB,KAAI,SAACuB,EAAWc,GACtB,OACE,kBAAC,IAAD,CACE9D,KAAK,WACL+D,QAASf,EACTgB,OAAQb,EAAUH,GAClBiB,QAASb,EAAWJ,GACpBkB,mBAAmB,EACnBC,YAAa,SAAAC,GACXlE,EAAS,CACPF,KAAM,SACNQ,KAAMP,EAAMO,KACZG,YAAayD,EAAEL,QACftD,SAAUR,EAAMQ,YAGpB4D,QAAS,SAAAD,GACPlE,EAAS,CACPF,KAAM,SACNQ,KAAMP,EAAMO,KACZG,YAAaV,EAAMU,YACnBF,SAAUR,EAAMQ,SAAS6D,IAAIF,EAAEL,iBAMzC,kBAAC,IAAD,CACEA,QAAS,SAAAxC,GAAM,IAAD,EAKRT,EAAIyD,cAAc,IAAIjC,KAAKf,EAAEW,OALrB,mBAEDsC,EAFC,KAERC,MACOC,EAHC,KAGRD,MACOE,EAJC,KAIRF,MAEJ,MAAM,GAAN,OAAUD,EAAV,YAAgBE,EAAhB,YAAsBC,MAG1B,kBAAC,IAAD,CAAeX,OAAO,OAAOY,gBAAgB,QAC7C,kBAAC,IAAD,CAAOb,QAAQ,SACf,kBAAC,IAAD,MACA,kBAAC,IAAD,CAASG,mBAAmB,EAAOW,QAAS,QAGhD,yBAAKxB,UAAU,YACZpD,EAAMQ,SAASgB,KAAI,SAACuB,GAAD,OAClB,wBACEqB,QAAS,SAAAD,GACPlE,EAAS,CACPF,KAAM,SACNQ,KAAMP,EAAMO,KACZG,YAAaV,EAAMU,YACnBF,SAAUR,EAAMQ,SAASqE,OAAO9B,OAInCA,UCnKG+B,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCZNC,IAASC,OACP,kBAAC,IAAMC,WAAP,KACE,kBAAC,EAAD,OAEFC,SAASC,eAAe,SDyHpB,kBAAmBC,WACrBA,UAAUC,cAAcC,MACrBtF,MAAK,SAAAuF,GACJA,EAAaC,gBAEdC,OAAM,SAAAlF,GACLmF,QAAQnF,MAAMA,EAAMC,c","file":"static/js/main.5c4d72ca.chunk.js","sourcesContent":["import React from \"react\";\nimport \"./App.css\";\nimport \"../node_modules/react-vis/dist/style.css\";\nimport {\n  XAxis,\n  LineChart,\n  Line,\n  AreaChart,\n  Area,\n  CartesianGrid,\n  YAxis,\n  Tooltip\n} from \"recharts\";\nimport { Map, List, Collection, Set } from \"immutable\";\n\ntype Entry = {\n  state: string;\n  positive: number;\n  dateChecked: Date;\n};\n\ntype State =\n  | { type: \"loading\" }\n  | { type: \"error\"; error: any }\n  | {\n      type: \"loaded\";\n      data: Entry[];\n      excluded: Set<string>;\n      highlighted: null | string;\n    };\n\nconst App: React.FC<{}> = () => {\n  const [state, setState] = React.useState<State>({ type: \"loading\" });\n  //rest of code will be performing for iOS on background too\n  //\n\n  React.useEffect(() => {\n    fetch(\"https://covidtracking.com/api/states/daily\")\n      .then(res => res.json())\n      .then(\n        data =>\n          setState({\n            type: \"loaded\",\n            data,\n            excluded: Set(),\n            highlighted: null\n          }),\n        error => setState({ type: \"error\", error })\n      );\n  }, []);\n\n  switch (state.type) {\n    case \"loading\":\n      return <div>Loading...</div>;\n    case \"error\":\n      return <div>Error: {state.error.message}</div>;\n    case \"loaded\":\n      const dtf = new Intl.DateTimeFormat(\"en\", {\n        year: \"numeric\",\n        month: \"short\",\n        day: \"2-digit\"\n      });\n      const nested_data: Collection.Keyed<\n        Date,\n        Collection.Keyed<string, number>\n      > = List(state.data)\n        .groupBy((e: Entry): Date => e.dateChecked)\n        .map((entries: Collection<number, Entry>) =>\n          entries\n            .groupBy((e: Entry): string => e.state)\n            .map((entries: Collection<number, Entry>): Entry => entries.first())\n            .map((e: Entry) => e.positive)\n        );\n      const most_recent_data = nested_data.maxBy((_, k) => k);\n      if (typeof most_recent_data === \"undefined\") {\n        return <div>Error: \"Empty data\"</div>;\n      }\n      const data = nested_data\n        .entrySeq()\n        .map(([date, cases]) =>\n          Map(cases).set(\"date\", new Date(date).valueOf())\n        )\n        .toList()\n\n        .sortBy((m: Map<string, number>) => m.get(\"date\"));\n\n      const states = most_recent_data\n        .sortBy((v, k) => -v)\n        .keySeq()\n        .filterNot(s => state.excluded.includes(s))\n        .toArray();\n\n      const getStroke = (s: String) => {\n        if (state.highlighted === s) {\n          return \"#ff0079\";\n        } else {\n          return \"#00b6c6\";\n        }\n      };\n\n      const getOpacity = (s: String) => {\n        switch (state.highlighted) {\n          case s:\n            return 1;\n          case null:\n            return 1;\n          default:\n            return 0.3;\n        }\n      };\n\n      return (\n        <div>\n          <div className=\"chart\">\n            <AreaChart\n              width={1000}\n              height={600}\n              data={data.toJS()}\n              margin={{ top: 10, right: 10, bottom: 10, left: 10 }}\n            >\n              {states.map((s: string, i: number) => {\n                return (\n                  <Area\n                    type=\"monotone\"\n                    dataKey={s}\n                    stroke={getStroke(s)}\n                    opacity={getOpacity(s)}\n                    isAnimationActive={false}\n                    onMouseOver={d => {\n                      setState({\n                        type: \"loaded\",\n                        data: state.data,\n                        highlighted: d.dataKey,\n                        excluded: state.excluded\n                      });\n                    }}\n                    onClick={d => {\n                      setState({\n                        type: \"loaded\",\n                        data: state.data,\n                        highlighted: state.highlighted,\n                        excluded: state.excluded.add(d.dataKey)\n                      });\n                    }}\n                  />\n                );\n              })}\n              <XAxis\n                dataKey={e => {\n                  const [\n                    { value: mo },\n                    { value: da },\n                    { value: ye }\n                  ] = dtf.formatToParts(new Date(e.date));\n                  return `${mo} ${da} ${ye}`;\n                }}\n              />\n              <CartesianGrid stroke=\"#ccc\" strokeDasharray=\"5 5\" />\n              <XAxis dataKey=\"name\" />\n              <YAxis />\n              <Tooltip isAnimationActive={false} offset={-200} />\n            </AreaChart>\n          </div>\n          <div className=\"excluded\">\n            {state.excluded.map((s: string) => (\n              <h1\n                onClick={d => {\n                  setState({\n                    type: \"loaded\",\n                    data: state.data,\n                    highlighted: state.highlighted,\n                    excluded: state.excluded.remove(s)\n                  });\n                }}\n              >\n                {s}\n              </h1>\n            ))}\n          </div>\n        </div>\n      );\n  }\n};\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from \"react\";\nimport ReactDOM from \"react-dom\";\nimport \"./index.css\";\nimport App from \"./App\";\nimport * as serviceWorker from \"./serviceWorker\";\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById(\"root\")\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}