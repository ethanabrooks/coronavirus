{"version":3,"sources":["App.tsx","serviceWorker.js","index.js"],"names":["App","React","useState","type","state","setState","useEffect","fetch","then","res","json","data","error","message","List","groupBy","e","map","entries","valueSeq","toList","x","Date","dateChecked","valueOf","y","positive","sort","p1","p2","toArray","xType","width","height","point","className","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","registration","unregister","catch","console"],"mappings":"kRA4EeA,EAhDW,WAAO,IAAD,EACJC,IAAMC,SAAgB,CAAEC,KAAM,YAD1B,mBACvBC,EADuB,KAChBC,EADgB,KAY9B,OATAJ,IAAMK,WAAU,WACdC,MAAM,8CACHC,MAAK,SAAAC,GAAG,OAAIA,EAAIC,UAChBF,MACC,SAAAG,GAAI,OAAIN,EAAS,CAAEF,KAAM,SAAUQ,YACnC,SAAAC,GAAK,OAAIP,EAAS,CAAEF,KAAM,QAASS,eAEtC,IAEKR,EAAMD,MACZ,IAAK,UACH,OAAO,2CACT,IAAK,QACH,OAAO,uCAAaC,EAAMQ,MAAMC,SAClC,IAAK,SACH,IAAMF,EAAsCG,YAAKV,EAAMO,MACpDI,SAAQ,SAACC,GAAD,OAAcA,EAAEZ,SACxBa,KAAI,SAAAC,GAAO,OAAIA,EAAQC,WAAWC,YAClCH,KAAI,SAACC,GAAD,OACHA,EACGD,KAAI,SAACD,GAAD,MAAe,CAClBK,EAAG,IAAIC,KAAKN,EAAEO,aAAaC,UAC3BC,EAAGT,EAAEU,aAENC,MAAK,SAACC,EAAqBC,GAAtB,OAA8CD,EAAGP,EAAIQ,EAAGR,KAC7DS,aAEJA,UAEH,OACE,6BACE,kBAAC,IAAD,CAAQC,MAAM,UAAUC,MAAO,KAAMC,OAAQ,KAC3C,kBAAC,IAAD,MACA,kBAAC,IAAD,MACA,kBAAC,IAAD,MACA,kBAAC,IAAD,MACCtB,EAAKM,KAAI,SAACiB,GAAD,OACR,kBAAC,IAAD,CAAYC,UAAWD,EAAM,GAAIvB,KAAMuB,EAAM,YCxDvCE,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCZNC,IAASC,OACP,kBAAC,IAAMC,WAAP,KACE,kBAAC,EAAD,OAEFC,SAASC,eAAe,SDyHpB,kBAAmBC,WACrBA,UAAUC,cAAcC,MACrBxC,MAAK,SAAAyC,GACJA,EAAaC,gBAEdC,OAAM,SAAAvC,GACLwC,QAAQxC,MAAMA,EAAMC,c","file":"static/js/main.49678aae.chunk.js","sourcesContent":["/// <reference path=\"../vendor/react-vis.d.ts\"/>\nimport React from \"react\";\nimport \"./App.css\";\nimport \"../node_modules/react-vis/dist/style.css\";\n\nimport {\n  XYPlot,\n  XAxis,\n  YAxis,\n  VerticalGridLines,\n  HorizontalGridLines,\n  LineSeries,\n  LineSeriesPoint\n} from \"react-vis\";\n\nimport { List } from \"immutable\";\n\ntype Entry = {\n  state: string;\n  positive: number;\n  dateChecked: Date;\n};\n\ntype State =\n  | { type: \"loading\" }\n  | { type: \"error\"; error: any }\n  | { type: \"loaded\"; data: Entry[] };\n\nconst App: React.FC<{}> = () => {\n  const [state, setState] = React.useState<State>({ type: \"loading\" });\n\n  React.useEffect(() => {\n    fetch(\"https://covidtracking.com/api/states/daily\")\n      .then(res => res.json())\n      .then(\n        data => setState({ type: \"loaded\", data }),\n        error => setState({ type: \"error\", error })\n      );\n  }, []);\n\n  switch (state.type) {\n    case \"loading\":\n      return <div>Loading...</div>;\n    case \"error\":\n      return <div>Error: {state.error.message}</div>;\n    case \"loaded\":\n      const data: [string, LineSeriesPoint[]][] = List(state.data)\n        .groupBy((e: Entry) => e.state)\n        .map(entries => entries.valueSeq().toList())\n        .map((entries: List<Entry>) =>\n          entries\n            .map((e: Entry) => ({\n              x: new Date(e.dateChecked).valueOf(),\n              y: e.positive\n            }))\n            .sort((p1: LineSeriesPoint, p2: LineSeriesPoint) => p1.x - p2.x)\n            .toArray()\n        )\n        .toArray();\n\n      return (\n        <div>\n          <XYPlot xType=\"ordinal\" width={1300} height={500}>\n            <VerticalGridLines />\n            <HorizontalGridLines />\n            <XAxis />\n            <YAxis />\n            {data.map((point: [string, LineSeriesPoint[]]) => (\n              <LineSeries className={point[0]} data={point[1]} />\n            ))}\n          </XYPlot>\n        </div>\n      );\n  }\n};\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from \"react\";\nimport ReactDOM from \"react-dom\";\nimport \"./index.css\";\nimport App from \"./App\";\nimport * as serviceWorker from \"./serviceWorker\";\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById(\"root\")\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}