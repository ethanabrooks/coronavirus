{"version":3,"sources":["App.tsx","serviceWorker.js","index.js"],"names":["App","React","useState","type","state","setState","params","useParams","console","log","useEffect","handleResize","window_dimensions","window","addEventListener","removeEventListener","fetch","then","res","json","raw_data","nested_data","List","groupBy","e","dateChecked","map","entries","first","positive","data","entrySeq","date","cases","OrderedMap","set","Date","valueOf","toList","sortBy","m","get","unsortedStates","d","keySeq","valueSeq","flatten","toOrderedSet","remove","latest_data","s","last","findLast","has","states","v","cases_selected","stateId","excluded","filter","Set","highlighted","selecting","selected","mouseOverMessage","error","message","dtf","Intl","DateTimeFormat","month","day","getStroke","getOpacity","width","innerWidth","height","innerHeight","getCases","className","isEmpty","left","right","slice","Math","min","max","chart_data","toJS","margin","top","bottom","onMouseDown","activeTooltipIndex","onMouseMove","onMouseUp","filterNot","includes","toArray","key","dataKey","stroke","opacity","isAnimationActive","activeDot","r","onMouseOver","onMouseLeave","onClick","thisStateCases","toSet","union","tickFormatter","format","orientation","offset","allowEscapeViewBox","x","labelFormatter","label","itemSorter","i","value","x1","x2","strokeOpacity","referenceArea","Boolean","location","hostname","match","ReactDOM","render","path","document","getElementById","navigator","serviceWorker","ready","registration","unregister","catch"],"mappings":"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","file":"static/js/main.341f2e67.chunk.js","sourcesContent":["import React from \"react\";\nimport \"./App.css\";\nimport \"react-vis/dist/style.css\";\nimport { Router, Link, useParams } from \"@reach/router\";\n\nimport {\n  ReferenceArea,\n  XAxis,\n  AreaChart,\n  Area,\n  YAxis,\n  Tooltip,\n} from \"recharts\";\nimport { OrderedSet, OrderedMap, Map, List, Collection, Set } from \"immutable\";\n\ntype Entry = {\n  state: string;\n  positive: number;\n  dateChecked: Date;\n};\n\ntype XSelection = { left: number; right: number };\ntype Data = OrderedMap<string, number>;\n\ntype State =\n  | { type: \"loading\" }\n  | { type: \"error\"; error: any }\n  | {\n      type: \"loaded\";\n      data: List<Data>;\n      latest_data: Data;\n      states: OrderedSet<string>;\n      excluded: Set<string>;\n      highlighted: null | string;\n      window_dimensions: { innerWidth: number; innerHeight: number };\n      selecting: null | XSelection;\n      selected: null | XSelection;\n      mouseOverMessage: string;\n    };\n\nconst highlight_color = \"#ff0079\";\nconst default_color = \"#00b6c6\";\n\nconst App: React.FC<{}> = () => {\n  const [state, setState] = React.useState<State>({ type: \"loading\" });\n  const params = useParams();\n  console.log(params);\n\n  React.useEffect(() => {\n    const handleResize = () => {\n      if (state.type === \"loaded\") {\n        setState({\n          ...state,\n          window_dimensions: window,\n        });\n      }\n    };\n    window.addEventListener(\"resize\", handleResize);\n    return () => {\n      window.removeEventListener(\"resize\", handleResize);\n    };\n  });\n\n  React.useEffect(() => {\n    fetch(\"https://covidtracking.com/api/states/daily\")\n      .then((res) => res.json())\n      .then(\n        (raw_data: Entry[]) => {\n          const nested_data: Collection.Keyed<\n            Date,\n            Collection.Keyed<string, number>\n          > = List(raw_data)\n            .groupBy((e: Entry): Date => e.dateChecked)\n            .map((entries: Collection<number, Entry>) =>\n              entries\n                .groupBy((e: Entry): string => e.state)\n                .map(\n                  (entries: Collection<number, Entry>): Entry => entries.first()\n                )\n                .map((e: Entry) => e.positive)\n            );\n          const data = nested_data\n            .entrySeq()\n            .map(([date, cases]) =>\n              OrderedMap(cases).set(\"date\", new Date(date).valueOf())\n            )\n            .toList()\n\n            .sortBy((m: Map<string, number>) => m.get(\"date\"));\n\n          const unsortedStates = nested_data\n            .map((d) => d.keySeq())\n            .valueSeq()\n            .flatten()\n            .toOrderedSet()\n            .remove(\"date\");\n\n          const latest_data = OrderedMap(\n            unsortedStates.map((s) => {\n              const last = data.findLast((d) => d.has(s));\n              return [s, last ? last.get(s, 0) : 0];\n            })\n          );\n\n          const states: OrderedSet<string> = unsortedStates.sortBy(\n            (v: number, s: string) => -latest_data.get(s, 0)\n          );\n\n          const cases_selected = latest_data.get(params.stateId);\n          const excluded = cases_selected\n            ? states.filter((s) => latest_data.get(s, 0) > cases_selected)\n            : Set();\n\n          setState({\n            type: \"loaded\",\n            data,\n            latest_data,\n            states,\n            excluded: excluded,\n            highlighted: null,\n            window_dimensions: window,\n            selecting: null,\n            selected: null,\n            mouseOverMessage: \"\",\n          });\n        },\n        (error) => setState({ type: \"error\", error })\n      );\n  }, []);\n\n  switch (state.type) {\n    case \"loading\":\n      return <div>Loading...</div>;\n    case \"error\":\n      return <div>Error: {state.error.message}</div>;\n    case \"loaded\":\n      const dtf = new Intl.DateTimeFormat(\"en\", {\n        month: \"short\",\n        day: \"numeric\",\n      });\n\n      const getStroke = (s: String) => {\n        if (state.highlighted === s) {\n          return highlight_color;\n        } else {\n          return default_color;\n        }\n      };\n\n      const getOpacity = (s: String) => {\n        switch (state.highlighted) {\n          case s:\n            return 1;\n          case null:\n            return 1;\n          default:\n            return 0.3;\n        }\n      };\n      const {\n        innerWidth: width,\n        innerHeight: height,\n      }: { innerWidth: number; innerHeight: number } = window;\n\n      const chart_data = () => {\n        if (state.selected) {\n          const left = state.selected.left;\n          const right = state.selected.right;\n          return state.data.slice(\n            Math.min(left, right),\n            Math.max(left, right) + 1\n          );\n        }\n        return state.data;\n      };\n      const referenceArea = () => {\n        if (state.selecting == null) {\n          return null;\n        }\n\n        const left = state.data.get(state.selecting.left)?.get(\"date\");\n        const right = state.data.get(state.selecting.right)?.get(\"date\");\n\n        return left && right ? (\n          <ReferenceArea\n            x1={Math.min(left, right)}\n            x2={Math.max(left, right)}\n            strokeOpacity={0.3}\n          />\n        ) : null;\n      };\n      const getCases = (s: string): number => state.latest_data.get(s, 0);\n      return (\n        <div>\n          <div className=\"title\">\n            <h1>Coronavirus Cases</h1>\n          </div>\n          <div className=\"instructions\">\n            <p>\n              Mouse over the graph to see which state each line/area represents.\n            </p>\n            <p>{`${state.mouseOverMessage}`}</p>\n            <p>\n              {state.excluded.isEmpty()\n                ? \"\"\n                : \"Click on state names to add this state and all those with fewer cases back to chart.\"}\n            </p>\n          </div>\n          <div className=\"source\">\n            <p>source: The Covid Tracking Project</p>\n          </div>\n          <div className=\"chart\">\n            <AreaChart\n              width={width}\n              height={height - 10}\n              data={chart_data().toJS()}\n              margin={{ top: 10, right: 10, bottom: 10, left: 10 }}\n              onMouseDown={(e) => {\n                console.log(e);\n                if (e) {\n                  setState({\n                    ...state,\n                    selecting: {\n                      left: e.activeTooltipIndex,\n                      right: e.activeTooltipIndex,\n                    },\n                  });\n                }\n              }}\n              onMouseMove={(e) => {\n                if (state.selecting && e) {\n                  return setState({\n                    ...state,\n                    selecting: {\n                      left: state.selecting.left,\n                      right: e.activeTooltipIndex,\n                    },\n                  });\n                }\n              }}\n              onMouseUp={(e) => {\n                if (state.selecting && e) {\n                  if (state.selecting.left !== state.selecting.right) {\n                    return setState({\n                      ...state,\n                      selecting: null,\n                      selected: state.selecting,\n                    });\n                  }\n                }\n                return setState({\n                  ...state,\n                  selecting: null,\n                  selected: null,\n                });\n              }}\n            >\n              {state.states\n                .filterNot((s) => state.excluded.includes(s))\n                .toArray()\n                .map((s: string) => {\n                  return (\n                    <Area\n                      key={s}\n                      type=\"monotone\"\n                      dataKey={s}\n                      stroke={getStroke(s)}\n                      opacity={getOpacity(s)}\n                      isAnimationActive={false}\n                      activeDot={{ r: 0 }}\n                      onMouseOver={(d) => {\n                        setState({\n                          ...state,\n                          highlighted: d.dataKey,\n                          mouseOverMessage: `Click to remove all states with more cases (currently) than ${d.dataKey} from the graph.`,\n                          excluded: state.excluded,\n                        });\n                      }}\n                      onMouseLeave={(d) => {\n                        setState({\n                          ...state,\n                          mouseOverMessage: \"\",\n                        });\n                      }}\n                      onClick={(d) => {\n                        const thisStateCases = getCases(d.dataKey);\n                        setState({\n                          ...state,\n                          excluded: state.states\n                            .filter((s) => getCases(s) > thisStateCases)\n                            .toSet()\n                            .union(state.excluded),\n                        });\n                      }}\n                    />\n                  );\n                })}\n              <XAxis\n                dataKey=\"date\"\n                tickFormatter={(d) => dtf.format(new Date(d))}\n              />\n              <XAxis dataKey=\"name\" />\n              <YAxis orientation=\"right\" />\n              <Tooltip\n                isAnimationActive={false}\n                offset={-300}\n                allowEscapeViewBox={{ x: true }}\n                labelFormatter={(label) => dtf.format(new Date(label))}\n                itemSorter={(i) => -i.value}\n              />\n              {referenceArea()}\n            </AreaChart>\n          </div>\n          <div className=\"excluded\">\n            {state.excluded.map((s: string) => (\n              <h2\n                key={s}\n                className=\"hover-red\"\n                onClick={(d) => {\n                  const thisStateCases = getCases(s);\n                  setState({\n                    ...state,\n                    excluded: state.excluded.filter(\n                      (s) => getCases(s) > thisStateCases\n                    ),\n                  });\n                }}\n              >\n                {s}\n              </h2>\n            ))}\n          </div>\n        </div>\n      );\n  }\n};\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === \"localhost\" ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === \"[::1]\" ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === \"production\" && \"serviceWorker\" in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener(\"load\", () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            \"This web app is being served cache-first by a service \" +\n              \"worker. To learn more, visit https://bit.ly/CRA-PWA\"\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then((registration) => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === \"installed\") {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                \"New content is available and will be used when all \" +\n                  \"tabs for this page are closed. See https://bit.ly/CRA-PWA.\"\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log(\"Content is cached for offline use.\");\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch((error) => {\n      console.error(\"Error during service worker registration:\", error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { \"Service-Worker\": \"script\" },\n  })\n    .then((response) => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get(\"content-type\");\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf(\"javascript\") === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then((registration) => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        \"No internet connection found. App is running in offline mode.\"\n      );\n    });\n}\n\nexport function unregister() {\n  if (\"serviceWorker\" in navigator) {\n    navigator.serviceWorker.ready\n      .then((registration) => {\n        registration.unregister();\n      })\n      .catch((error) => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from \"react\";\nimport ReactDOM from \"react-dom\";\nimport \"./index.css\";\nimport App from \"./App\";\nimport * as serviceWorker from \"./serviceWorker\";\nimport { Router } from \"@reach/router\";\n\nReactDOM.render(\n  <Router>\n    <App path=\"/\" />\n    <App path=\"/:stateId\" />\n  </Router>,\n  document.getElementById(\"root\")\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}